{"version":3,"sources":["components/InputBox.js","components/OutputBox.js","components/FilterBox.js","utils/JsonParserUtils.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnChange","event","setState","text","target","value","state","handleOnParse","react_default","a","createElement","Form_default","Group","Label","Control","as","rows","onChange","Button_default","className","onClick","React","Component","OutputBox","readOnly","filteredData","FilterBox","handleCheckboxChange","_event$target","name","checked","prevState","filters","objectSpread","defineProperty","handleInputChange","_event$target2","prevProps","options","newFilters","forEach","option","_this2","_this$props","handleOnFilter","filterOptions","push","Row","key","Col","Check","type","label","size","disabled","Card_default","style","height","Body","overflow","getAllPathKeys","object","keys","Set","traverse","k","arguments","length","undefined","path","Array","isArray","add","filterData","data","JSON","parse","stringify","traverseAndFilter","v","criteria","split","op","val","Number","isNaN","App","parsedData","alert","_this$state","Header","Container_default","fluid","Row_default","Col_default","components_InputBox","components_FilterBox","components_OutputBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60ab4462.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nclass InputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\"\n    };\n  };\n\n  handleOnChange = (event) => {\n    this.setState({\n      text: event.target.value\n    });\n  };\n\n  render() {\n    const { handleOnParse } = this.props;\n    const { text } = this.state;\n    return (\n      <Form>\n        <Form.Group>\n          <Form.Label>Input</Form.Label>\n          <Form.Control as=\"textarea\" rows=\"20\" value={text} onChange={this.handleOnChange}/> \n        </Form.Group>\n        <Button className=\"float-right\" onClick={() => {handleOnParse(text)}}>Parse JSON</Button>\n      </Form>\n    );\n  };\n};\n\nInputBox.propTypes = {\n  handleOnParse: PropTypes.func.isRequired\n};\n\nexport default InputBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Form from 'react-bootstrap/Form';\n\nconst OutputBox = (props) => (\n  <Form>\n    <Form.Group>\n      <Form.Label>Output</Form.Label>\n      <Form.Control as=\"textarea\" rows=\"20\" readOnly value={props.filteredData}/> \n    </Form.Group>\n  </Form>\n);\n\nOutputBox.propTypes = {\n  filteredData: PropTypes.string.isRequired\n};\n\nexport default OutputBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n\nclass FilterBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filters: {}\n    };\n  };\n\n  componentDidUpdate(prevProps) {\n    const { options } = this.props;\n    if (options !== prevProps.options) {\n      let newFilters = {};\n      options.forEach((option) => {\n        newFilters[option] = {\n          \"checked\": false,\n          \"value\": \"\"\n        };\n      })\n      this.setState({\n        filters: newFilters\n      })\n    }\n  }\n\n  handleCheckboxChange = (event) => {\n    const { name, checked } = event.target\n    this.setState(prevState => ({\n      filters: {\n        ...prevState.filters,\n        [name]: {\n          ...prevState.filters[name],\n          checked: checked\n        }\n      }\n    }));\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState(prevState => ({\n      filters: {\n        ...prevState.filters,\n        [name]: {\n          ...prevState.filters[name],\n          value: value\n        }\n      }\n    }));\n  };\n\n  render() {\n    const { options, handleOnFilter } = this.props;\n    const { filters } = this.state;\n    let filterOptions = [];\n    options.forEach((option) => {\n      filterOptions.push(\n        <Form.Row key={option}>\n          <Form.Group as={Col}>\n            <Form.Check name={option} type=\"checkbox\" label={option} onChange={this.handleCheckboxChange}/>\n          </Form.Group>\n          <Form.Group as={Col}>\n            <Form.Control size=\"sm\" disabled={typeof filters[option] !== 'undefined' ? !filters[option].checked : false} name={option} onChange={this.handleInputChange}/>\n          </Form.Group>\n        </Form.Row>\n      );\n    });\n\n    return (\n      <Form>\n        <Form.Group>\n          <Form.Label>Filter Options</Form.Label>\n          <Card style={{height:\"494px\"}}>\n            <Card.Body style={{overflow:\"scroll\"}}>\n              <Form.Group>\n                { filterOptions }\n              </Form.Group>\n            </Card.Body>\n          </Card>\n        </Form.Group>\n        <Button onClick={() => handleOnFilter(filters)} className=\"float-right\">Filter JSON</Button>\n      </Form>\n    );\n  };\n};\n\nFilterBox.propTypes = {\n  options: PropTypes.object.isRequired,\n  handleOnFilter: PropTypes.func.isRequired\n};\n\nexport default FilterBox;","/**\n * Traverse through JSON object and get all path keys.\n * @param  {Object} object  Can accept any valid JSON object\n * @return {[Set]}            A Set of all path keys in the form [\"key1\", \"key1.sub1\", \"key2\"]\n */\nexport function getAllPathKeys(object) {\n  let keys = new Set([]);\n  traverse(object, keys, \"\");\n  return keys;\n};\n\n/**\n * A helper function that will recursively call itself to traverse through the JSON object to populate keys\n * @param  {Object} object  Can accept any valid JSON object\n * @param  {[Set]} keys     A Set to store populated path keys in the form [\"key1\", \"key1.sub1\", \"key2\"]\n * @param  {String} k       A string containing the parent key relative to the current object. k is \"\" represents the root object.\n */\nfunction traverse(object, keys, k = \"\") {\n  for (let key in object) {\n    const path = k.length ? k + '.' : k;\n    if (typeof object[key] === 'object' && object[key] !== null) {\n      if (Array.isArray(object)) {\n        traverse(object[key], keys, k);\n      } else {\n        traverse(object[key], keys, path + key);\n      };\n    } else {\n      keys.add(path + key);\n    };\n  };\n};\n\n/**\n * Filter JSON data by traversing it to meet the criteria in filters\n * @param  {Object} data      Can accept any valid JSON data\n * @param  {[Object]} filters An array of object that contains the filter options in the form [{\"path1\": {\"checked\": {Boolean}, \"value\": {String}}}]\n * @return {Object}           A JSON object that has been filtered to meet the criteria in filters\n */\nexport function filterData(data, filters) {\n  let filteredData = JSON.parse(JSON.stringify(data)); // Create a deep-cloned of data so that I don't mutate the original\n  traverseAndFilter(filteredData, filters, \"\");\n  return filteredData;\n}\n\n/**\n * A helper function that will recursively call itself to traverse through the JSON object and filter the data\n * @param  {Object} data    Can accept any valid JSON data\n * @param  {[Set]} filters  An array of object that contains the filter options in the form [{\"path1\": {\"checked\": {Boolean}, \"value\": {String}}}]\n * @param  {String} k       A string containing the parent key relative to the current object. k is \"\" represents the root object.\n */\nfunction traverseAndFilter(data, filters, k = \"\") {\n  for (let key in data) {\n    const path = k.length ? k + '.' : k;\n    if (typeof data[key] === \"object\" && data[key] !== null) {\n      if (Array.isArray(data)) {\n        traverseAndFilter(data[key], filters, k);\n      } else {\n        traverseAndFilter(data[key], filters, path + key);\n      };\n    } else {\n      // value in filters object {\"path\":{\"checked\":{Boolean}, \"value\": {String}}}\n      const v = filters[path + key];\n      if (v.checked) {\n        if (v.value === \"\") {\n          continue;\n        } else {\n          const criteria = v.value.split(\" \");\n          const op = criteria[0];\n          const val = criteria[1];\n          switch (op) {\n            case \"==\":\n              if (val != data[key]) {\n                delete data[key];\n              };\n              break;\n            case \"!=\":\n              if (val == data[key]) {\n                delete data[key];\n              };\n              break;\n            case \">\":\n              if (Number.isNaN(Number(val)) || data[key] <= Number(val)) {\n                delete data[key];\n              };\n              break;\n            case \">=\":\n              if (Number.isNaN(Number(val)) || data[key] < Number(val)) {\n                delete data[key];\n              };\n              break;\n            case \"<\":\n              if (Number.isNaN(Number(val)) || data[key] >= Number(val)) {\n                delete data[key];\n              };\n              break;\n            case \"<=\":\n              if (Number.isNaN(Number(val)) || data[key] > Number(val)) {\n                delete data[key];\n              };\n              break;\n            default:\n              delete data[key];\n          };\n        };\n      } else {\n        // Filter option not checked\n        delete data[key];\n      };\n    };\n  };\n};","import React from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport InputBox from './components/InputBox.js';\nimport OutputBox from './components/OutputBox.js';\nimport FilterBox from './components/FilterBox.js';\n\nimport { getAllPathKeys, filterData } from './utils/JsonParserUtils.js';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      data: \"\",\n      filteredData: \"\",\n      options: new Set([])\n    };\n  };\n\n  handleOnParse = (data) => {\n    try {\n      const parsedData = JSON.parse(data);\n      const options = getAllPathKeys(parsedData);\n      this.setState({\n        data: parsedData,\n        options: options\n      });\n    } catch (event) {\n      alert(\"Invalid JSON Format\");\n    };\n  };\n\n  handleOnFilter = (filters) => {\n    const { data } = this.state;\n    const filteredData = filterData(data, filters);\n    this.setState({\n      filteredData: JSON.stringify(filteredData)\n    })\n  };\n\n  render() {\n    const { options, filteredData } = this.state\n    return (\n      <div>\n        <Card>\n          <Card.Header>Mini JSON Parser</Card.Header>\n          <Card.Body>\n            <Container fluid=\"true\">\n              <Row>\n                <Col>\n                  <InputBox handleOnParse={this.handleOnParse}/>\n                </Col>\n                <Col>\n                  <FilterBox handleOnFilter={this.handleOnFilter} options={options}/>\n                </Col>\n                <Col>\n                  <OutputBox filteredData={filteredData}/>\n                </Col>\n              </Row>\n            </Container>\n          </Card.Body>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}